{"version":3,"sources":["../esm/Base/MaterialComponent.js"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","doNotRemoveProps","MaterialComponent","props","classText","buildClassName","componentProps","userDefinedClasses","className","class","element","materialDom","propName","attributes","getClassName","split","filter","value","index","self","indexOf","join","mdcProps","forEach","prop","ripple","control","MDCRipple","nextProps","MDComponent","mdcNotifyProps","destroy","componentName","propKey","hasOwnProperty","attrs","Component","bind","prototype"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAMA;;AACA;;AACA;;AARA,IAAIA,UAAU,GAAI,UAAQ,SAAKA,UAAd,IAA6B,UAAUC,UAAV,EAAsBC,MAAtB,EAA8BC,GAA9B,EAAmCC,IAAnC,EAAyC;AACnF,MAAIC,CAAC,GAAGC,SAAS,CAACC,MAAlB;AAAA,MAA0BC,CAAC,GAAGH,CAAC,GAAG,CAAJ,GAAQH,MAAR,GAAiBE,IAAI,KAAK,IAAT,GAAgBA,IAAI,GAAGK,MAAM,CAACC,wBAAP,CAAgCR,MAAhC,EAAwCC,GAAxC,CAAvB,GAAsEC,IAArH;AAAA,MAA2HO,CAA3H;AACA,MAAI,QAAOC,OAAP,uDAAOA,OAAP,OAAmB,QAAnB,IAA+B,OAAOA,OAAO,CAACC,QAAf,KAA4B,UAA/D,EAA2EL,CAAC,GAAGI,OAAO,CAACC,QAAR,CAAiBZ,UAAjB,EAA6BC,MAA7B,EAAqCC,GAArC,EAA0CC,IAA1C,CAAJ,CAA3E,KACK,KAAK,IAAIU,CAAC,GAAGb,UAAU,CAACM,MAAX,GAAoB,CAAjC,EAAoCO,CAAC,IAAI,CAAzC,EAA4CA,CAAC,EAA7C;AAAiD,QAAIH,CAAC,GAAGV,UAAU,CAACa,CAAD,CAAlB,EAAuBN,CAAC,GAAG,CAACH,CAAC,GAAG,CAAJ,GAAQM,CAAC,CAACH,CAAD,CAAT,GAAeH,CAAC,GAAG,CAAJ,GAAQM,CAAC,CAACT,MAAD,EAASC,GAAT,EAAcK,CAAd,CAAT,GAA4BG,CAAC,CAACT,MAAD,EAASC,GAAT,CAA7C,KAA+DK,CAAnE;AAAxE;AACL,SAAOH,CAAC,GAAG,CAAJ,IAASG,CAAT,IAAcC,MAAM,CAACM,cAAP,CAAsBb,MAAtB,EAA8BC,GAA9B,EAAmCK,CAAnC,CAAd,EAAqDA,CAA5D;AACH,CALD;;AASA,IAAMQ,gBAAgB,GAAG,CAAC,UAAD,CAAzB;AACA;;;;;;;;;IAQaC,iB;;;;;;;;;;;;2BACFC,K,EAAO;AACV,UAAI,CAAC,KAAKC,SAAV,EAAqB;AACjB,aAAKA,SAAL,GAAiB,KAAKC,cAAL,CAAoBF,KAApB,CAAjB;AACH,OAHS,CAIV;;;AACA,UAAMG,cAAc,GAAGH,KAAvB;AACA,UAAMI,kBAAkB,GAAGD,cAAc,CAACE,SAAf,IAA4BF,cAAc,CAACG,KAA3C,IAAoD,EAA/E,CANU,CAOV;AACA;;AACA,UAAIH,cAAc,CAACG,KAAnB,EAA0B;AACtB,eAAOH,cAAc,CAACG,KAAtB;AACH;;AACD,UAAIH,cAAc,CAACE,SAAnB,EAA8B;AAC1B,eAAOF,cAAc,CAACE,SAAtB;AACH;;AACD,UAAME,OAAO,GAAG,KAAKC,WAAL,CAAiBL,cAAjB,CAAhB;AACA,UAAIM,QAAQ,GAAG,YAAf;;AACA,UAAI,WAAWF,OAAf,EAAwB;AACpBE,QAAAA,QAAQ,GAAG,OAAX,CADoB,CAEpB;;AACAF,QAAAA,OAAO,CAACP,KAAR,GAAgBO,OAAO,CAACP,KAAR,IAAiB,EAAjC;AACH,OAJD,MAKK;AACDO,QAAAA,OAAO,CAACG,UAAR,GAAqBH,OAAO,CAACG,UAAR,IAAsB,EAA3C;AACH,OAxBS,CAyBV;;;AACAH,MAAAA,OAAO,CAACE,QAAD,CAAP,CAAkBJ,SAAlB,GAA8B,UAAGD,kBAAH,cAAyB,KAAKO,YAAL,CAAkBJ,OAAlB,CAAzB,EACzBK,KADyB,CACnB,GADmB,EAEzBC,MAFyB,CAElB,UAACC,KAAD,EAAQC,KAAR,EAAeC,IAAf;AAAA,eAAwBA,IAAI,CAACC,OAAL,CAAaH,KAAb,MAAwBC,KAAxB,IAAiCD,KAAK,KAAK,EAAnE;AAAA,OAFkB,EAEqD;AAFrD,OAGzBI,IAHyB,CAGpB,GAHoB,CAA9B,CA1BU,CA8BV;;AACA,WAAKC,QAAL,CAAcC,OAAd,CAAsB,UAAAC,IAAI,EAAI;AAC1B;AACA,YAAIA,IAAI,IAAIvB,gBAAZ,EAA8B;AAC1B;AACH,SAJyB,CAK1B;;;AACA,eAAOS,OAAO,CAACE,QAAD,CAAP,CAAkBY,IAAlB,CAAP;AACH,OAPD;AAQA,aAAOd,OAAP;AACH;AACD;;;;wCACoB;AAChB,UAAI,KAAKP,KAAL,CAAWsB,MAAX,IAAqB,KAAKC,OAA9B,EAAuC;AACnC,aAAKD,MAAL,GAAc,IAAIE,iBAAJ,CAAc,KAAKD,OAAnB,CAAd;AACH;AACJ;;;8CACyBE,S,EAAW;AACjC,UAAI,KAAKC,WAAL,IAAoB,KAAKC,cAA7B,EAA6C;AAAA;AAAA;AAAA;;AAAA;AACzC,+BAAmB,KAAKA,cAAxB,8HAAwC;AAAA,gBAA7BN,IAA6B;;AACpC,gBAAI,KAAKrB,KAAL,CAAWqB,IAAX,MAAqBI,SAAS,CAACJ,IAAD,CAAlC,EAA0C;AACtC,mBAAKK,WAAL,CAAiBL,IAAjB,IAAyBI,SAAS,CAACJ,IAAD,CAAlC;AACH;AACJ;AALwC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAM5C;;AAPgC;AAAA;AAAA;;AAAA;AAQjC,8BAAmB,KAAKF,QAAxB,mIAAkC;AAAA,cAAvBE,KAAuB;;AAC9B,cAAI,KAAKrB,KAAL,CAAWqB,KAAX,MAAqBI,SAAS,CAACJ,KAAD,CAAlC,EAA0C;AACtC,iBAAKpB,SAAL,GAAiB,KAAKC,cAAL,CAAoBuB,SAApB,CAAjB;AACA;AACH;AACJ;AAbgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcpC;;;2CACsB;AACnB,UAAI,KAAKH,MAAT,EAAiB;AACb,aAAKA,MAAL,CAAYM,OAAZ;AACH;AACJ;;;6CACwB;AACrB,UAAI,KAAKF,WAAL,IAAoB,KAAKC,cAA7B,EAA6C;AAAA;AAAA;AAAA;;AAAA;AACzC,gCAAmB,KAAKA,cAAxB,mIAAwC;AAAA,gBAA7BN,IAA6B;AACpC,iBAAKK,WAAL,CAAiBL,IAAjB,IAAyB,KAAKrB,KAAL,CAAWqB,IAAX,CAAzB;AACH;AAHwC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAI5C;AACJ,K,CACD;;;;kCACcE,O,EAAS;AACnB,WAAKA,OAAL,GAAeA,OAAf;AACH;AACD;;;;mCACevB,K,EAAO;AAClB;AACA,UAAIC,SAAS,GAAG,SAAS,KAAK4B,aAA9B,CAFkB,CAGlB;;AACA,WAAK,IAAMC,OAAX,IAAsB9B,KAAtB,EAA6B;AACzB,YAAIA,KAAK,CAAC+B,cAAN,CAAqBD,OAArB,CAAJ,EAAmC;AAC/B,cAAMT,IAAI,GAAGrB,KAAK,CAAC8B,OAAD,CAAlB;;AACA,cAAI,OAAOT,IAAP,KAAgB,SAAhB,IAA6BA,IAAjC,EAAuC;AACnC,gBAAI,KAAKF,QAAL,CAAcF,OAAd,CAAsBa,OAAtB,MAAmC,CAAC,CAAxC,EAA2C;AACvC7B,cAAAA,SAAS,mBAAY,KAAK4B,aAAjB,eAAmCC,OAAnC,CAAT;AACH;AACJ;AACJ;AACJ;;AACD,aAAO7B,SAAP;AACH;AACD;;;;iCACaM,O,EAAS;AAClB,UAAI,CAACA,OAAL,EAAc;AACV,eAAO,EAAP;AACH;;AACD,UAAIE,QAAQ,GAAG,YAAf;;AACA,UAAI,WAAWF,OAAf,EAAwB;AACpBE,QAAAA,QAAQ,GAAG,OAAX,CADoB,CAEpB;;AACAF,QAAAA,OAAO,CAACP,KAAR,GAAgBO,OAAO,CAACP,KAAR,IAAiB,EAAjC;AACH,OAJD,MAKK;AACDO,QAAAA,OAAO,CAACG,UAAR,GAAqBH,OAAO,CAACG,UAAR,IAAsB,EAA3C;AACH,OAZiB,CAalB;;;AACA,UAAMsB,KAAK,GAAIzB,OAAO,CAACE,QAAD,CAAP,GAAoBF,OAAO,CAACE,QAAD,CAAP,IAAqB,EAAxD;AACA,UAAIR,SAAS,GAAG,KAAKA,SAArB;;AACA,UAAI+B,KAAK,CAAC1B,KAAV,EAAiB;AACbL,QAAAA,SAAS,IAAI,MAAM+B,KAAK,CAAC1B,KAAzB;AACH;;AACD,UAAI0B,KAAK,CAAC3B,SAAN,IAAmB2B,KAAK,CAAC3B,SAAN,KAAoB2B,KAAK,CAAC1B,KAAjD,EAAwD;AACpDL,QAAAA,SAAS,IAAI,MAAM+B,KAAK,CAAC3B,SAAzB;AACH;;AACD,aAAOJ,SAAP;AACH;;;EAxHkCgC,iB;;;;AA0HvCnD,UAAU,CAAC,CACPoD,mBADO,CAAD,EAEPnC,iBAAiB,CAACoC,SAFX,EAEsB,eAFtB,EAEuC,IAFvC,CAAV;;eAGepC,iB","sourcesContent":["var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { MDCRipple } from '@material/ripple';\nimport { bind } from 'bind-decorator';\nimport { Component } from 'preact';\nconst doNotRemoveProps = ['disabled'];\n/**\n * Base class for every Material component in this package\n * NOTE: every component should add a ref by the name of `control` to its root dom for autoInit Properties\n *\n * @export\n * @class MaterialComponent\n * @extends {Component}\n */\nexport class MaterialComponent extends Component {\n    render(props) {\n        if (!this.classText) {\n            this.classText = this.buildClassName(props);\n        }\n        // Fetch a VNode\n        const componentProps = props;\n        const userDefinedClasses = componentProps.className || componentProps.class || '';\n        // We delete class props and add them later in the final\n        // step so every component does not need to handle user specified classes.\n        if (componentProps.class) {\n            delete componentProps.class;\n        }\n        if (componentProps.className) {\n            delete componentProps.className;\n        }\n        const element = this.materialDom(componentProps);\n        let propName = 'attributes';\n        if ('props' in element) {\n            propName = 'props';\n            // @ts-ignore\n            element.props = element.props || {};\n        }\n        else {\n            element.attributes = element.attributes || {};\n        }\n        // @ts-ignore\n        element[propName].className = `${userDefinedClasses} ${this.getClassName(element)}`\n            .split(' ')\n            .filter((value, index, self) => self.indexOf(value) === index && value !== '') // Unique + exclude empty class names\n            .join(' ');\n        // Clean this shit of proxy attributes\n        this.mdcProps.forEach(prop => {\n            // TODO: Fix this better\n            if (prop in doNotRemoveProps) {\n                return;\n            }\n            // @ts-ignore\n            delete element[propName][prop];\n        });\n        return element;\n    }\n    /** Attach the ripple effect */\n    componentDidMount() {\n        if (this.props.ripple && this.control) {\n            this.ripple = new MDCRipple(this.control);\n        }\n    }\n    componentWillReceiveProps(nextProps) {\n        if (this.MDComponent && this.mdcNotifyProps) {\n            for (const prop of this.mdcNotifyProps) {\n                if (this.props[prop] !== nextProps[prop]) {\n                    this.MDComponent[prop] = nextProps[prop];\n                }\n            }\n        }\n        for (const prop of this.mdcProps) {\n            if (this.props[prop] !== nextProps[prop]) {\n                this.classText = this.buildClassName(nextProps);\n                break;\n            }\n        }\n    }\n    componentWillUnmount() {\n        if (this.ripple) {\n            this.ripple.destroy();\n        }\n    }\n    afterComponentDidMount() {\n        if (this.MDComponent && this.mdcNotifyProps) {\n            for (const prop of this.mdcNotifyProps) {\n                this.MDComponent[prop] = this.props[prop];\n            }\n        }\n    }\n    // Shared setter for the root element ref\n    setControlRef(control) {\n        this.control = control;\n    }\n    /** Build the className based on component names and mdc props */\n    buildClassName(props) {\n        // Class name based on component name\n        let classText = 'mdc-' + this.componentName;\n        // Loop over mdcProps to turn them into classNames\n        for (const propKey in props) {\n            if (props.hasOwnProperty(propKey)) {\n                const prop = props[propKey];\n                if (typeof prop === 'boolean' && prop) {\n                    if (this.mdcProps.indexOf(propKey) !== -1) {\n                        classText += ` mdc-${this.componentName}--${propKey}`;\n                    }\n                }\n            }\n        }\n        return classText;\n    }\n    /** Returns the class name for element */\n    getClassName(element) {\n        if (!element) {\n            return '';\n        }\n        let propName = 'attributes';\n        if ('props' in element) {\n            propName = 'props';\n            // @ts-ignore\n            element.props = element.props || {};\n        }\n        else {\n            element.attributes = element.attributes || {};\n        }\n        // @ts-ignore\n        const attrs = (element[propName] = element[propName] || {});\n        let classText = this.classText;\n        if (attrs.class) {\n            classText += ' ' + attrs.class;\n        }\n        if (attrs.className && attrs.className !== attrs.class) {\n            classText += ' ' + attrs.className;\n        }\n        return classText;\n    }\n}\n__decorate([\n    bind\n], MaterialComponent.prototype, \"setControlRef\", null);\nexport default MaterialComponent;\n//# sourceMappingURL=MaterialComponent.js.map"],"file":"MaterialComponent.js"}